#include "pch.h"
#include <iostream>

# ifdef _OPENMP
#include <omp.h>
# else
# define omp_get_thread_num() 0
# endif

# define N 1000
# define chunk 100
# define mostrar 10
using namespace std;

void imprimeArreglo(float* d);

int main()
{
	cout << "Sumando arreglos en paralelo!"!\n";
		float a[N], b[N], c[N];
	int i;

	for (i = 0; i < N, i++)
	{
		a[i] = i * 10;
		b[i] = (i + 3) * 3.7;
	}
	int pedazos = chunk;

# pragma omp parallel for \
	shared(a, b, c, pedazos) private(i) \
	schedule(static, pedazos)

	for (i = 0; i < N; i++)
		c[i] = a[i] + b[i];

	cout << "Imprimiendo los primeros " << mostrar << "valores del arreglo A" << endl;
	imprimeArreglo(a);
	cout << "Imprimiendo los primeros " << mostrar << "valores del arreglo B" << endl;
	imprimeArreglo(b);
	cout << "Imprimiendo los primeros " << mostrar << "valores del arreglo C" << endl;
	imprimeArreglo(c);
}


void imprimeArreglo(float* d)
{
	for (int x = 0; x < mostrar; x++)
		cout << d[x] << " - ";
	cout << endl;
}